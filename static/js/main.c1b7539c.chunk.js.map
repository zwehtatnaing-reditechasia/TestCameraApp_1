{"version":3,"sources":["logo.svg","camera/camera.js","outLineDiv/outLineDiv.js","large-popover/largePopOver.js","stuffingContainer/stuffingContainer.js","stuffingContainerDynamic/stuffingContainerDynamic.js","App.js","serviceWorker.js","index.js","images/openCamera_3.png"],"names":["module","exports","ClientCamera","props","state","currentActionName","actionFor","dataUri","undefined","this","handelChange","closeCamera","Grid","item","container","xs","idealFacingMode","FACING_MODES","ENVIRONMENT","idealResolution","width","height","imageType","IMAGE_TYPES","PNG","imageCompression","isMaxResolution","isImageMirror","isSilentMode","isDisplayStartCameraError","isFullscreen","sizeFactor","onTakePhoto","React","Component","Camera","propTypes","withStyles","root","position","content","padding","inputLabel","left","top","transform","classes","id","label","children","useState","labelWidth","setLabelWidth","labelRef","useRef","useEffect","labelNode","ReactDOM","findDOMNode","current","offsetWidth","style","marginTop","InputLabel","ref","htmlFor","variant","className","shrink","notched","LargePopOver","forwardRef","Fade","in","open","handleOpen","setState","handleClose","closeModal","modalState","contents","bind","Modal","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","IconButton","aria-label","color","onClick","right","fontSize","src","img","alt","propertyName","formControls","Slide","direction","ShippingType","valid","message","value","Factory","StuffingDate","SI","Container","StuffingContainerDynamic","openImageForm","closeImageForm","onImgSave","formData","data","currentData","currentImgData","push","onImgCancel","frmState","formState","errors","handleDateChange","dateData","eventName","newDate","Date","save","openCamera","imageContent","factorySelectedValue","imgFormOnChange","nextProps","nextState","index","imgContents","ImageData","Description","map","dt","i","key","sm","md","lg","Card","CardHeader","action","event","removeImage","title","CardActionArea","CardMedia","backgroundSize","image","formControlObject","newData","hasOwnProperty","removeData","idx","indexOf","splice","Typography","justify","wrap","FormControl","margin","TextField","error","helperText","defaultValue","onChange","target","alignItems","length","renderImageData","Fab","Dialog","aria-labelledby","DialogTitle","DialogContent","minWidth","defaultImg","DialogActions","Button","fullScreen","TransitionComponent","Transition","App","Boolean","window","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c1b7539c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./camera.css\";\nimport { Grid, Box } from \"@material-ui/core\";\nimport Camera, { FACING_MODES, IMAGE_TYPES } from \"react-html5-camera-photo\";\nimport \"react-html5-camera-photo/build/css/index.css\";\n\n// todo: Unless you need to use lifecycle methods or local state,\n// write your component in functional form as above and delete\n// this section.\nclass ClientCamera extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentActionName: this.props.actionFor\n    };\n  }\n\n  onTakePhoto(dataUri) {\n    if (dataUri !== undefined && dataUri !== null) {\n      this.props.handelChange(dataUri, this.state.currentActionName);\n    }\n    this.props.closeCamera();\n  }\n\n  render() {\n    return (\n      <Grid item container xs={12}>\n        <Camera\n          idealFacingMode={FACING_MODES.ENVIRONMENT}\n          idealResolution={{ width: 768, height: 1024 }}\n          imageType={IMAGE_TYPES.PNG}\n          imageCompression={0.97}\n          isMaxResolution={true}\n          isImageMirror={false}\n          isSilentMode={true}\n          isDisplayStartCameraError={true}\n          isFullscreen={true}\n          sizeFactor={1}\n          onTakePhoto={dataUri => {\n            this.onTakePhoto(dataUri);\n          }}\n        />\n      </Grid>\n    );\n  }\n}\n\nconst CameraPropTypes = {\n  // always use prop types!\n};\n\nCamera.propTypes = CameraPropTypes;\n\nexport default ClientCamera;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport NotchedOutline from \"@material-ui/core/OutlinedInput/NotchedOutline\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst styles = {\r\n  root: {\r\n    position: \"relative\"\r\n  },\r\n  content: {\r\n    padding: \"1.5px 15px 10px 10px\"\r\n  },\r\n  inputLabel: {\r\n    position: \"absolute\",\r\n    left: 0,\r\n    top: 0,\r\n    // slight alteration to spec spacing to match visual spec result\r\n    transform: \"translate(0, 24px) scale(1)\"\r\n  }\r\n};\r\n\r\nconst LabelledOutline = ({ classes, id, label, children }) => {\r\n  const [labelWidth, setLabelWidth] = React.useState(0);\r\n  const labelRef = React.useRef(null);\r\n  React.useEffect(() => {\r\n    const labelNode = ReactDOM.findDOMNode(labelRef.current);\r\n    setLabelWidth(labelNode != null ? labelNode.offsetWidth : 0);\r\n  }, [label]);\r\n\r\n  return (\r\n    <div style={{ position: \"relative\", marginTop: \"8px\",  width: \"100%\" }}>\r\n      <InputLabel\r\n        ref={labelRef}\r\n        htmlFor={id}\r\n        variant=\"outlined\"\r\n        className={classes.inputLabel}\r\n        shrink\r\n      >\r\n        {label}\r\n      </InputLabel>\r\n      <div className={classes.root}>\r\n        <div id={id} className={classes.content}>\r\n          {children}\r\n          <NotchedOutline notched labelWidth={labelWidth} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default withStyles(styles)(LabelledOutline);\r\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./largePopOver.css\";\nimport {\n  Grid,\n  Box,\n  Fab,\n  Button,\n  Modal,\n  Zoom,\n  Backdrop,\n  useMediaQuery,\n  Fade,\n  Dialog,\n  Typography,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  InputLabel,\n  DialogTitle,\n  AppBar,\n  Tabs,\n  TextField,\n  FormControl,\n  Tab,\n  Snackbar,\n  Switch,\n  Slide,\n  Toolbar,\n  IconButton,\n  Paper,\n  List,\n  ListItem,\n  ListItemText,\n  Divider,\n  Card,\n  CardActionArea,\n  CardActions,\n  CardContent,\n  CardMedia,\n  CardHeader\n} from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Fade in={this.state.open} ref={ref} {...props} />;\n});\n// todo: Unless you need to use lifecycle methods or local state,\n// write your component in functional form as above and delete\n// this section.\nclass LargePopOver extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: this.props.modalState,\n      contents: this.props.contents\n    };\n    this.handleOpen = this.handleOpen.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    return { open: props.modalState, contents: props.contents };\n  }\n\n  handleOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleClose = () => {\n    this.props.closeModal();\n  };\n\n  render() {\n    return (\n      <Modal\n        className=\"modal\"\n        open={this.state.open}\n        onClose={this.handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500\n        }}\n      >\n        <Fade in={this.state.open}>\n          <div className=\"paper\">\n            <IconButton\n              aria-label=\"close\"\n              className=\"\"\n              color=\"primary\"\n              onClick={this.handleClose}\n              style={{ right: 0, position: \"absolute\" }}\n            >\n              <CloseIcon fontSize=\"large\" />\n            </IconButton>\n            <img\n              src={this.state.contents.img}\n              width=\"100%\"\n              height=\"100%\"\n              alt={this.state.contents.propertyName}\n            />\n          </div>\n        </Fade>\n      </Modal>\n    );\n  }\n}\n\nconst LargePopOverPropTypes = {\n  // always use prop types!\n};\n\nLargePopOver.propTypes = LargePopOverPropTypes;\n\nexport default LargePopOver;\n","import React, { Component, forwardRef, createRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./stuffingContainer.css\";\nimport {\n  Grid,\n  Button,\n  Dialog,\n  Typography,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  InputLabel,\n  AppBar,\n  TextField,\n  FormControl,\n  Snackbar,\n  Switch,\n  Slide,\n  Toolbar,\n  IconButton,\n  Paper,\n  List,\n  ListItem,\n  ListItemText,\n  Divider,\n  Card,\n  CardActionArea,\n  CardActions,\n  CardContent,\n  CardMedia,\n  CardHeader\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport ClientCamera from \"../camera/camera\";\nimport LabelledOutline from \"../outLineDiv/outLineDiv\";\nimport defaultImg from \"../images/openCamera_3.png\";\nimport LargePopOver from \"../large-popover/largePopOver\";\n\n\nconst Transition = forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" />;\n});\n\n// todo: Unless you need to use lifecycle methods or local state,\n// write your component in functional form as above and delete\n// this section.\n\n\nconst formControls = {\n  ShippingType: {\n    valid: true,\n    message: \"\",\n    value: \"\"\n  },\n  Factory: {\n    valid: true,\n    message: \"\",\n    value: \"\"\n  },\n  StuffingDate: {\n    valid: true,\n    message: \"\",\n    value: \"\"\n  },\n  SI: {\n    valid: true,\n    message: \"\",\n    value: \"\"\n  },\n  Container: {\n    valid: true,\n    message: \"\",\n    value: \"\"\n  }\n};\nclass StuffingContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: {\n        ShippingType: \"\",\n        Factory: \"\",\n        StuffingDate: Date.now(),\n        SI: \"\",\n        SequenceNumber: \"\",\n        Container: \"\",\n        SealNo: \"\",\n        TruckID: \"\",\n        Driver: \"\",\n        Supervisor: \"\",\n        Truck: \"\",\n        OuterRightWall: \"\",\n        OuterLeftWall: \"\",\n        InsideFrontWall: \"\",\n        InsideContainerLeftWall: \"\",\n        InsideInnerHalfLeftWall: \"\",\n        InsideOuterHalfLeftWall: \"\",\n        InsideContainerRightWall: \"\",\n        InsideInnerHalfRightWall: \"\",\n        InsideOuterHalfRightWall: \"\",\n        InsideContainerCeiling: \"\",\n        InsideInnerHalfCeiling: \"\",\n        InsideOuterHalfCeiling: \"\",\n        InsideContainerFloor: \"\",\n        NetContainerWeight: \"\",\n        InsideFloorInnerSection: \"\",\n        InsideFloorMiddleSection: \"\",\n        InsideFloorOuterSection: \"\",\n        OutsideCeilingInnerHalf: \"\",\n        OutsideCeilingOuterHalf: \"\",\n        InsideCleaningProcess: \"\",\n        StuffingFirstpallet: \"\",\n        AfterStuffing8thPallet: \"\",\n        AfterStuffingLastPallet: \"\",\n        AfterClosedContainerDoor: \"\",\n        SealingContainer: \"\",\n        DiverAndContainer: \"\"\n      },\n      formControls: { ...formControls },\n      openCamera: false,\n      currentActionName: \"\",\n      imageContent: \"\",\n      modalState: false,\n      factorySelectedValue: \"\"\n    };\n    this.closeCamera = this.closeCamera.bind(this);\n    this.handelChange = this.handelChange.bind(this);\n    this.openCamera = this.openCamera.bind(this);\n    this.handelChange = this.handelChange.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n  }\n\n  openCamera(propertyName) {\n    console.log(this.state[propertyName])\n    if (this.state.data[propertyName] === \"\" ||\n      this.state.data[propertyName] === undefined\n    ) {\n      this.setState({ openCamera: true, currentActionName: propertyName });\n    } else {\n       console.log(propertyName)\n      let imgContents = {\n        img: this.state.data[propertyName],\n        propertyName: propertyName\n      };\n      this.setState({ modalState: true, imageContent: imgContents });\n    }\n  }\n\n  closeCamera() {\n    this.setState({ openCamera: false });\n  }\n\n  closeModal() {\n    this.setState({ modalState: false });\n  }\n\n  handelChange(value, propertyName) {\n    let formControlObject = { ...this.state.formControls };\n    let newData = { ...this.state.data };\n    if (\n      this.state.formControls.hasOwnProperty(propertyName) &&\n      (value === \"\" || value === undefined)\n    ) {\n      formControlObject[propertyName].valid = false;\n      formControlObject[\n        propertyName\n      ].message = `${propertyName} cannot be Empty`;\n    } else {\n      if (this.state.formControls.hasOwnProperty(propertyName)) {\n        formControlObject[propertyName].valid = true;\n        formControlObject[propertyName].message = \"\";\n      }\n      newData[propertyName] = value;\n    }\n    if (propertyName === \"Factory\") {\n      this.setState({ factorySelectedValue: value });\n    }\n    this.setState({ data: newData, formControls: formControlObject },() => console.log(this.state));\n  }\n\n  handleDateChange = (dateData, eventName) => {\n    if (dateData !== undefined && dateData !== null) {\n      let newDate = new Date(dateData);\n      this.handelChange(newDate, eventName);\n    }\n  };\n\n  removeImage(propertyName) {\n    let newData = { ...this.state.data };\n    newData[propertyName] = \"\";\n    this.setState({ data: newData });\n  }\n\n  save = () => {\n   \n  };\n\n  cancel() {}\n\n  render() {\n    return (\n      <Grid container>\n        <Typography variant=\"h4\">Stuffing Container</Typography>\n\n        <Grid item container xs={12}>\n          <Grid container direction=\"row\" justify=\"flex-start\" wrap=\"wrap\">\n            {/** Shipping_Type */}\n            <Grid item style={{ padding: 10 }} xs={12} sm={6} md={6} lg={6}>\n              <FormControl style={{ width: \"100%\", margin: 4 }}>\n                <TextField\n                  id=\"Shipping_Type\"\n                  label=\"Shipping Type\"\n                  error={!this.state.formControls.ShippingType.valid}\n                  helperText={this.state.formControls.ShippingType.message}\n                  defaultValue=\"\"\n                  className=\"\"\n                  onChange={event =>\n                    this.handelChange(event.target.value, \"ShippingType\")\n                  }\n                  margin=\"dense\"\n                />\n              </FormControl>\n            </Grid>\n            {/** End Shipping_Type */}\n          </Grid>\n        </Grid>\n\n        <Grid item container xs={12}>\n          <LabelledOutline\n            label=\"Group: 1. Before Stuffing\"\n            style={{ width: \"100%\", padding: \"10px\" }}\n          >\n            {/** Documentation  */}\n            <Grid\n              container\n              direction=\"row\"\n              justify=\"space-between\"\n              alignItems=\"center\"\n              wrap=\"wrap\"\n            >\n              {/** Truck (From Front) */}\n              <Grid item style={{ padding: 10 }} xs={12} sm={6} md={3} lg={3}>\n                <Card>\n                  <CardHeader\n                    action={\n                      <IconButton\n                        aria-label=\"close\"\n                        onClick={event => {\n                          this.removeImage(\"Truck\");\n                        }}\n                      >\n                        <CloseIcon />\n                      </IconButton>\n                    }\n                    title=\"Truck\"\n                  />\n                  <CardActionArea\n                    onClick={event => {\n                      this.openCamera(\"Truck\");\n                    }}\n                  >\n                    <CardMedia\n                      style={{ height: 250, backgroundSize: \"cover\" }}\n                      image={\n                        this.state.data.Truck === \"\" ||\n                        this.state.data.Truck === undefined\n                          ? defaultImg\n                          : this.state.data.Truck\n                      }\n                      title=\"Truck (From Front)\"\n                    />\n                  </CardActionArea>\n                </Card>\n              </Grid>\n              {/** END Truck (From Front) */}\n              {/**\tOuter Right wall */}\n              <Grid item style={{ padding: 10 }} xs={12} sm={6} md={3} lg={3}>\n                <Card>\n                  <CardHeader\n                    action={\n                      <IconButton\n                        aria-label=\"close\"\n                        onClick={event => {\n                          this.removeImage(\"OuterRightWall\");\n                        }}\n                      >\n                        <CloseIcon />\n                      </IconButton>\n                    }\n                    title=\"Outer Right wall\"\n                  />\n                  <CardActionArea\n                    onClick={event => {\n                      this.openCamera(\"OuterRightWall\");\n                    }}\n                  >\n                    <CardMedia\n                      style={{ height: 250, backgroundSize: \"cover\" }}\n                      image={\n                        this.state.data.OuterRightWall === \"\" ||\n                        this.state.data.OuterRightWall === undefined\n                          ? defaultImg\n                          : this.state.data.OuterRightWall\n                      }\n                      title=\"Outer Right wall\"\n                    />\n                  </CardActionArea>\n                </Card>\n              </Grid>\n              {/**\tEND Outer Right wall */}\n              {/**\tOuter Left wall */}\n              <Grid item style={{ padding: 10 }} xs={12} sm={6} md={3} lg={3}>\n                <Card>\n                  <CardHeader\n                    action={\n                      <IconButton\n                        aria-label=\"close\"\n                        onClick={event => {\n                          this.removeImage(\"OuterLeftWall\");\n                        }}\n                      >\n                        <CloseIcon />\n                      </IconButton>\n                    }\n                    title=\"Outer Left wall\"\n                  />\n                  <CardActionArea\n                    onClick={event => {\n                      this.openCamera(\"OuterLeftWall\");\n                    }}\n                  >\n                    <CardMedia\n                      style={{ height: 250, backgroundSize: \"cover\" }}\n                      image={\n                        this.state.data.OuterLeftWall === \"\" ||\n                        this.state.data.OuterLeftWall === undefined\n                          ? defaultImg\n                          : this.state.data.OuterLeftWall\n                      }\n                      title=\"Outer Left wall\"\n                    />\n                  </CardActionArea>\n                </Card>\n              </Grid>\n              {/**\tEND Left Right wall */}\n              {/**\tInside Front wall */}\n              <Grid item style={{ padding: 10 }} xs={12} sm={6} md={3} lg={3}>\n                <Card>\n                  <CardHeader\n                    action={\n                      <IconButton\n                        aria-label=\"close\"\n                        onClick={event => {\n                          this.removeImage(\"InsideFrontWall\");\n                        }}\n                      >\n                        <CloseIcon />\n                      </IconButton>\n                    }\n                    title=\"Inside Front wall\"\n                  />\n                  <CardActionArea\n                    onClick={event => {\n                      this.openCamera(\"InsideFrontWall\");\n                    }}\n                  >\n                    <CardMedia\n                      style={{ height: 250, backgroundSize: \"cover\" }}\n                      image={\n                        this.state.data.InsideFrontWall === \"\" ||\n                        this.state.data.InsideFrontWall === undefined\n                          ? defaultImg\n                          : this.state.data.InsideFrontWall\n                      }\n                      title=\"Inside Front wall\"\n                    />\n                  </CardActionArea>\n                </Card>\n              </Grid>\n              {/**\tEND Inside Front wall */}\n              {/**\tInside Container Left wall */}\n              <Grid item style={{ padding: 10 }} xs={12} sm={6} md={3} lg={3}>\n                <Card>\n                  <CardHeader\n                    action={\n                      <IconButton\n                        aria-label=\"close\"\n                        onClick={event => {\n                          this.removeImage(\"InsideContainerLeftWall\");\n                        }}\n                      >\n                        <CloseIcon />\n                      </IconButton>\n                    }\n                    title=\"Inside Container Left wall\"\n                  />\n                  <CardActionArea\n                    onClick={event => {\n                      this.openCamera(\"InsideContainerLeftWall\");\n                    }}\n                  >\n                    <CardMedia\n                      style={{ height: 250, backgroundSize: \"cover\" }}\n                      image={\n                        this.state.data.InsideContainerLeftWall === \"\" ||\n                        this.state.data.InsideContainerLeftWall === undefined\n                          ? defaultImg\n                          : this.state.data.InsideContainerLeftWall\n                      }\n                      title=\"Inside Container Left wall\"\n                    />\n                  </CardActionArea>\n                </Card>\n              </Grid>\n              {/**\tEND Inside Container Left wall */}\n              {/**\tInside inner half left wall */}\n              <Grid item style={{ padding: 10 }} xs={12} sm={6} md={3} lg={3}>\n                <Card>\n                  <CardHeader\n                    action={\n                      <IconButton\n                        aria-label=\"close\"\n                        onClick={event => {\n                          this.removeImage(\"InsideContainerLeftWall\");\n                        }}\n                      >\n                        <CloseIcon />\n                      </IconButton>\n                    }\n                    title=\"Inside inner half left wall\"\n                  />\n                  <CardActionArea\n                    onClick={event => {\n                      this.openCamera(\"InsideContainerLeftWall\");\n                    }}\n                  >\n                    <CardMedia\n                      style={{ height: 250, backgroundSize: \"cover\" }}\n                      image={\n                        this.state.data.InsideInnerHalfLeftWall === \"\" ||\n                        this.state.data.InsideInnerHalfLeftWall === undefined\n                          ? defaultImg\n                          : this.state.data.InsideInnerHalfLeftWall\n                      }\n                      title=\"Inside inner half left wall\"\n                    />\n                  </CardActionArea>\n                </Card>\n              </Grid>\n              {/**\tEND Inside inner half left wall */}\n              {/**\tInside outer half left wall */}\n              <Grid item style={{ padding: 10 }} xs={12} sm={6} md={3} lg={3}>\n                <Card>\n                  <CardHeader\n                    action={\n                      <IconButton\n                        aria-label=\"close\"\n                        onClick={event => {\n                          this.removeImage(\"InsideContainerLeftWall\");\n                        }}\n                      >\n                        <CloseIcon />\n                      </IconButton>\n                    }\n                    title=\"Inside outer half left wall\"\n                  />\n                  <CardActionArea\n                    onClick={event => {\n                      this.openCamera(\"InsideContainerLeftWall\");\n                    }}\n                  >\n                    <CardMedia\n                      style={{ height: 250, backgroundSize: \"cover\" }}\n                      image={\n                        this.state.data.InsideOuterHalfLeftWall === \"\" ||\n                        this.state.data.InsideOuterHalfLeftWall === undefined\n                          ? defaultImg\n                          : this.state.data.InsideOuterHalfLeftWall\n                      }\n                      title=\"Inside outer half left wall\"\n                    />\n                  </CardActionArea>\n                </Card>\n              </Grid>\n              {/**\tEND Inside outer half left wall */}\n              {/** Inside container Right wall */}\n              <Grid item style={{ padding: 10 }} xs={12} sm={6} md={3} lg={3}>\n                <Card>\n                  <CardHeader\n                    action={\n                      <IconButton\n                        aria-label=\"close\"\n                        onClick={event => {\n                          this.removeImage(\"InsideContainerLeftWall\");\n                        }}\n                      >\n                        <CloseIcon />\n                      </IconButton>\n                    }\n                    title=\"Inside outer half left wall\"\n                  />\n                  <CardActionArea\n                    onClick={event => {\n                      this.openCamera(\"InsideContainerLeftWall\");\n                    }}\n                  >\n                    <CardMedia\n                      style={{ height: 250, backgroundSize: \"cover\" }}\n                      image={\n                        this.state.data.InsideContainerRightWall === \"\" ||\n                        this.state.data.InsideContainerRightWall === undefined\n                          ? defaultImg\n                          : this.state.data.InsideContainerRightWall\n                      }\n                      title=\"Inside container Right wall\"\n                    />\n                  </CardActionArea>\n                </Card>\n              </Grid>\n              {/**\tEND Inside container Right wall */}\n              {/** Inside inner half right wall */}\n              <Grid item style={{ padding: 10 }} xs={12} sm={6} md={3} lg={3}>\n                <Card>\n                  <CardHeader\n                    action={\n                      <IconButton\n                        aria-label=\"close\"\n                        onClick={event => {\n                          this.removeImage(\"InsideContainerLeftWall\");\n                        }}\n                      >\n                        <CloseIcon />\n                      </IconButton>\n                    }\n                    title=\"Inside inner half right wall\"\n                  />\n                  <CardActionArea\n                    onClick={event => {\n                      this.openCamera(\"InsideContainerLeftWall\");\n                    }}\n                  >\n                    <CardMedia\n                      style={{ height: 250, backgroundSize: \"cover\" }}\n                      image={\n                        this.state.data.InsideInnerHalfRightWall === \"\" ||\n                        this.state.data.InsideInnerHalfRightWall === undefined\n                          ? defaultImg\n                          : this.state.data.InsideInnerHalfRightWall\n                      }\n                      title=\"Inside inner half right wall\"\n                    />\n                  </CardActionArea>\n                </Card>\n              </Grid>\n              {/**\tEND Inside inner half right wall */}\n              {/** Inside outer half right wall */}\n              <Grid item style={{ padding: 10 }} xs={12} sm={6} md={3} lg={3}>\n                <Card>\n                  <CardHeader\n                    action={\n                      <IconButton\n                        aria-label=\"close\"\n                        onClick={event => {\n                          this.removeImage(\"InsideContainerLeftWall\");\n                        }}\n                      >\n                        <CloseIcon />\n                      </IconButton>\n                    }\n                    title=\"Inside outer half right wall\"\n                  />\n                  <CardActionArea\n                    onClick={event => {\n                      this.openCamera(\"InsideContainerLeftWall\");\n                    }}\n                  >\n                    <CardMedia\n                      style={{ height: 250, backgroundSize: \"cover\" }}\n                      image={\n                        this.state.data.InsideOuterHalfRightWall === \"\" ||\n                        this.state.data.InsideOuterHalfRightWall === undefined\n                          ? defaultImg\n                          : this.state.data.InsideOuterHalfRightWall\n                      }\n                      title=\"Inside outer half right wall\"\n                    />\n                  </CardActionArea>\n                </Card>\n              </Grid>\n              {/**\tEND Inside outer half right wall */}\n              {/** \tInside container Ceiling */}\n              <Grid item style={{ padding: 10 }} xs={12} sm={6} md={3} lg={3}>\n                <Card>\n                  <CardHeader\n                    action={\n                      <IconButton\n                        aria-label=\"close\"\n                        onClick={event => {\n                          this.removeImage(\"InsideContainerLeftWall\");\n                        }}\n                      >\n                        <CloseIcon />\n                      </IconButton>\n                    }\n                    title=\"Inside container Ceiling\"\n                  />\n                  <CardActionArea\n                    onClick={event => {\n                      this.openCamera(\"InsideContainerLeftWall\");\n                    }}\n                  >\n                    <CardMedia\n                      style={{ height: 250, backgroundSize: \"cover\" }}\n                      image={\n                        this.state.data.InsideContainerCeiling === \"\" ||\n                        this.state.data.InsideContainerCeiling === undefined\n                          ? defaultImg\n                          : this.state.data.InsideContainerCeiling\n                      }\n                      title=\"Inside container Ceiling\"\n                    />\n                  </CardActionArea>\n                </Card>\n              </Grid>\n              {/**\tEND Inside container Ceiling */}\n              {/** \tInside inner half ceiling */}\n              <Grid item style={{ padding: 10 }} xs={12} sm={6} md={3} lg={3}>\n                <Card>\n                  <CardHeader\n                    action={\n                      <IconButton\n                        aria-label=\"close\"\n                        onClick={event => {\n                          this.removeImage(\"InsideInnerHalfCeiling\");\n                        }}\n                      >\n                        <CloseIcon />\n                      </IconButton>\n                    }\n                    title=\"Inside inner half ceiling\"\n                  />\n                  <CardActionArea\n                    onClick={event => {\n                      this.openCamera(\"InsideInnerHalfCeiling\");\n                    }}\n                  >\n                    <CardMedia\n                      style={{ height: 250, backgroundSize: \"cover\" }}\n                      image={\n                        this.state.data.InsideInnerHalfCeiling === \"\" ||\n                        this.state.data.InsideInnerHalfCeiling === undefined\n                          ? defaultImg\n                          : this.state.data.InsideInnerHalfCeiling\n                      }\n                      title=\"Inside inner half ceiling\"\n                    />\n                  </CardActionArea>\n                </Card>\n              </Grid>\n              {/**\tEND Inside inner half ceiling */}\n              {/** \tInside outer half ceiling */}\n              <Grid item style={{ padding: 10 }} xs={12} sm={6} md={3} lg={3}>\n                <Card>\n                  <CardHeader\n                    action={\n                      <IconButton\n                        aria-label=\"close\"\n                        onClick={event => {\n                          this.removeImage(\"InsideOuterHalfCeiling\");\n                        }}\n                      >\n                        <CloseIcon />\n                      </IconButton>\n                    }\n                    title=\"Inside outer half ceiling\"\n                  />\n                  <CardActionArea\n                    onClick={event => {\n                      this.openCamera(\"InsideOuterHalfCeiling\");\n                    }}\n                  >\n                    <CardMedia\n                      style={{ height: 250, backgroundSize: \"cover\" }}\n                      image={\n                        this.state.data.InsideOuterHalfCeiling === \"\" ||\n                        this.state.data.InsideOuterHalfCeiling === undefined\n                          ? defaultImg\n                          : this.state.data.InsideOuterHalfCeiling\n                      }\n                      title=\"Inside outer half ceiling\"\n                    />\n                  </CardActionArea>\n                </Card>\n              </Grid>\n              {/**\tEND Inside outer half ceiling */}\n              {/** \tInside container floor */}\n              <Grid item style={{ padding: 10 }} xs={12} sm={6} md={3} lg={3}>\n                <Card>\n                  <CardHeader\n                    action={\n                      <IconButton\n                        aria-label=\"close\"\n                        onClick={event => {\n                          this.removeImage(\"InsideContainerFloor\");\n                        }}\n                      >\n                        <CloseIcon />\n                      </IconButton>\n                    }\n                    title=\"Inside container floor\"\n                  />\n                  <CardActionArea\n                    onClick={event => {\n                      this.openCamera(\"InsideContainerFloor\");\n                    }}\n                  >\n                    <CardMedia\n                      style={{ height: 250, backgroundSize: \"cover\" }}\n                      image={\n                        this.state.data.InsideContainerFloor === \"\" ||\n                        this.state.data.InsideContainerFloor === undefined\n                          ? defaultImg\n                          : this.state.data.InsideContainerFloor\n                      }\n                      title=\"Inside container floor\"\n                    />\n                  </CardActionArea>\n                </Card>\n              </Grid>\n              {/**\tEND Inside container floor */}\n              {/** Net Container Weight */}\n              <Grid item style={{ padding: 10 }} xs={12} sm={6} md={3} lg={3}>\n                <Card>\n                  <CardHeader\n                    action={\n                      <IconButton\n                        aria-label=\"close\"\n                        onClick={event => {\n                          this.removeImage(\"NetContainerWeight\");\n                        }}\n                      >\n                        <CloseIcon />\n                      </IconButton>\n                    }\n                    title=\"Net Container Weight\"\n                  />\n                  <CardActionArea\n                    onClick={event => {\n                      this.openCamera(\"NetContainerWeight\");\n                    }}\n                  >\n                    <CardMedia\n                      style={{ height: 250, backgroundSize: \"cover\" }}\n                      image={\n                        this.state.data.NetContainerWeight === \"\" ||\n                        this.state.data.NetContainerWeight === undefined\n                          ? defaultImg\n                          : this.state.data.NetContainerWeight\n                      }\n                      title=\"Net Container Weight\"\n                    />\n                  </CardActionArea>\n                </Card>\n              </Grid>\n              {/**\tEND Net Container Weight */}\n              {/** Inside floor inner section */}\n              <Grid item style={{ padding: 10 }} xs={12} sm={6} md={3} lg={3}>\n                <Card>\n                  <CardHeader\n                    action={\n                      <IconButton\n                        aria-label=\"close\"\n                        onClick={event => {\n                          this.removeImage(\"InsideFloorInnerSection\");\n                        }}\n                      >\n                        <CloseIcon />\n                      </IconButton>\n                    }\n                    title=\"Inside floor inner section\"\n                  />\n                  <CardActionArea\n                    onClick={event => {\n                      this.openCamera(\"InsideFloorInnerSection\");\n                    }}\n                  >\n                    <CardMedia\n                      style={{ height: 250, backgroundSize: \"cover\" }}\n                      image={\n                        this.state.data.InsideFloorInnerSection === \"\" ||\n                        this.state.data.InsideFloorInnerSection === undefined\n                          ? defaultImg\n                          : this.state.data.InsideFloorInnerSection\n                      }\n                      title=\"Inside floor inner section\"\n                    />\n                  </CardActionArea>\n                </Card>\n              </Grid>\n              {/**\tEND Inside floor inner section */}\n              {/** Inside floor middle section */}\n              <Grid item style={{ padding: 10 }} xs={12} sm={6} md={3} lg={3}>\n                <Card>\n                  <CardHeader\n                    action={\n                      <IconButton\n                        aria-label=\"close\"\n                        onClick={event => {\n                          this.removeImage(\"InsideFloorMiddleSection\");\n                        }}\n                      >\n                        <CloseIcon />\n                      </IconButton>\n                    }\n                    title=\"Inside floor middle section\"\n                  />\n                  <CardActionArea\n                    onClick={event => {\n                      this.openCamera(\"InsideFloorMiddleSection\");\n                    }}\n                  >\n                    <CardMedia\n                      style={{ height: 250, backgroundSize: \"cover\" }}\n                      image={\n                        this.state.data.InsideFloorMiddleSection === \"\" ||\n                        this.state.data.InsideFloorMiddleSection === undefined\n                          ? defaultImg\n                          : this.state.data.InsideFloorMiddleSection\n                      }\n                      title=\"Inside floor middle section\"\n                    />\n                  </CardActionArea>\n                </Card>\n              </Grid>\n              {/**\tEND Inside floor middle section */}\n              {/** Inside floor outer section */}\n              <Grid item style={{ padding: 10 }} xs={12} sm={6} md={3} lg={3}>\n                <Card>\n                  <CardHeader\n                    action={\n                      <IconButton\n                        aria-label=\"close\"\n                        onClick={event => {\n                          this.removeImage(\"InsideFloorOuterSection\");\n                        }}\n                      >\n                        <CloseIcon />\n                      </IconButton>\n                    }\n                    title=\"Inside floor outer section\"\n                  />\n                  <CardActionArea\n                    onClick={event => {\n                      this.openCamera(\"InsideFloorOuterSection\");\n                    }}\n                  >\n                    <CardMedia\n                      style={{ height: 250, backgroundSize: \"cover\" }}\n                      image={\n                        this.state.data.InsideFloorOuterSection === \"\" ||\n                        this.state.data.InsideFloorOuterSection === undefined\n                          ? defaultImg\n                          : this.state.data.InsideFloorOuterSection\n                      }\n                      title=\"Inside floor outer section\"\n                    />\n                  </CardActionArea>\n                </Card>\n              </Grid>\n              {/**\tEND Inside floor outer section */}\n              {/** Outside ceiling inner half */}\n              <Grid item style={{ padding: 10 }} xs={12} sm={6} md={3} lg={3}>\n                <Card>\n                  <CardHeader\n                    action={\n                      <IconButton\n                        aria-label=\"close\"\n                        onClick={event => {\n                          this.removeImage(\"OutsideCeilingInnerHalf\");\n                        }}\n                      >\n                        <CloseIcon />\n                      </IconButton>\n                    }\n                    title=\"Outside ceiling inner half\"\n                  />\n                  <CardActionArea\n                    onClick={event => {\n                      this.openCamera(\"OutsideCeilingInnerHalf\");\n                    }}\n                  >\n                    <CardMedia\n                      style={{ height: 250, backgroundSize: \"cover\" }}\n                      image={\n                        this.state.data.OutsideCeilingInnerHalf === \"\" ||\n                        this.state.data.OutsideCeilingInnerHalf === undefined\n                          ? defaultImg\n                          : this.state.data.OutsideCeilingInnerHalf\n                      }\n                      title=\"Outside ceiling inner half\"\n                    />\n                  </CardActionArea>\n                </Card>\n              </Grid>\n              {/**\tEND Outside ceiling inner half */}\n              {/** Outside ceiling Outer half */}\n              <Grid item style={{ padding: 10 }} xs={12} sm={6} md={3} lg={3}>\n                <Card>\n                  <CardHeader\n                    action={\n                      <IconButton\n                        aria-label=\"close\"\n                        onClick={event => {\n                          this.removeImage(\"OutsideCeilingOuterHalf\");\n                        }}\n                      >\n                        <CloseIcon />\n                      </IconButton>\n                    }\n                    title=\"Outside ceiling Outer half\"\n                  />\n                  <CardActionArea\n                    onClick={event => {\n                      this.openCamera(\"OutsideCeilingOuterHalf\");\n                    }}\n                  >\n                    <CardMedia\n                      style={{ height: 250, backgroundSize: \"cover\" }}\n                      image={\n                        this.state.data.OutsideCeilingOuterHalf === \"\" ||\n                        this.state.data.OutsideCeilingOuterHalf === undefined\n                          ? defaultImg\n                          : this.state.data.OutsideCeilingOuterHalf\n                      }\n                      title=\"Outside ceiling Outer half\"\n                    />\n                  </CardActionArea>\n                </Card>\n              </Grid>\n              {/**\tEND Outside ceiling Outer half */}\n              {/** Inside cleaning process */}\n              <Grid item style={{ padding: 10 }} xs={12} sm={6} md={3} lg={3}>\n                <Card>\n                  <CardHeader\n                    action={\n                      <IconButton\n                        aria-label=\"close\"\n                        onClick={event => {\n                          this.removeImage(\"InsideCleaningProcess\");\n                        }}\n                      >\n                        <CloseIcon />\n                      </IconButton>\n                    }\n                    title=\"Outside ceiling Outer half\"\n                  />\n                  <CardActionArea\n                    onClick={event => {\n                      this.openCamera(\"InsideCleaningProcess\");\n                    }}\n                  >\n                    <CardMedia\n                      style={{ height: 250, backgroundSize: \"cover\" }}\n                      image={\n                        this.state.data.InsideCleaningProcess === \"\" ||\n                        this.state.data.InsideCleaningProcess === undefined\n                          ? defaultImg\n                          : this.state.data.InsideCleaningProcess\n                      }\n                      title=\"Inside cleaning process\"\n                    />\n                  </CardActionArea>\n                </Card>\n              </Grid>\n              {/**\tEND Inside cleaning process */}\n            </Grid>\n          </LabelledOutline>\n        </Grid>\n\n        <Grid item container xs={12}>\n          <LabelledOutline\n            label=\"Group: 2. Stuffing\"\n            style={{ width: \"100%\", padding: \"10px\" }}\n          >\n            {/** Documentation  */}\n            <Grid\n              container\n              direction=\"row\"\n              justify=\"flex-start\"\n              alignItems=\"center\"\n              wrap=\"wrap\"\n            >\n              {/** Stuffing first pallet */}\n              <Grid item style={{ padding: 10 }} xs={12} sm={6} md={3} lg={3}>\n                <Card>\n                  <CardHeader\n                    action={\n                      <IconButton\n                        aria-label=\"close\"\n                        onClick={event => {\n                          this.removeImage(\"StuffingFirstpallet\");\n                        }}\n                      >\n                        <CloseIcon />\n                      </IconButton>\n                    }\n                    title=\"Stuffing first pallet\"\n                  />\n                  <CardActionArea\n                    onClick={event => {\n                      this.openCamera(\"StuffingFirstpallet\");\n                    }}\n                  >\n                    <CardMedia\n                      style={{ height: 250, backgroundSize: \"cover\" }}\n                      image={\n                        this.state.data.StuffingFirstpallet === \"\" ||\n                        this.state.data.StuffingFirstpallet === undefined\n                          ? defaultImg\n                          : this.state.data.StuffingFirstpallet\n                      }\n                      title=\"Stuffing first pallet\"\n                    />\n                  </CardActionArea>\n                </Card>\n              </Grid>\n              {/** END Stuffing first pallet */}\n              {/** After stuffing 8th pallet */}\n              <Grid item style={{ padding: 10 }} xs={12} sm={6} md={3} lg={3}>\n                <Card>\n                  <CardHeader\n                    action={\n                      <IconButton\n                        aria-label=\"close\"\n                        onClick={event => {\n                          this.removeImage(\"AfterStuffing8thPallet\");\n                        }}\n                      >\n                        <CloseIcon />\n                      </IconButton>\n                    }\n                    title=\"After stuffing 8th pallet\"\n                  />\n                  <CardActionArea\n                    onClick={event => {\n                      this.openCamera(\"AfterStuffing8thPallet\");\n                    }}\n                  >\n                    <CardMedia\n                      style={{ height: 250, backgroundSize: \"cover\" }}\n                      image={\n                        this.state.data.AfterStuffing8thPallet === \"\" ||\n                        this.state.data.AfterStuffing8thPallet === undefined\n                          ? defaultImg\n                          : this.state.data.AfterStuffing8thPallet\n                      }\n                      title=\"After stuffing 8th pallet\"\n                    />\n                  </CardActionArea>\n                </Card>\n              </Grid>\n              {/**\tEND After stuffing 8th pallet */}\n              {/** After stuffing last pallet */}\n              <Grid item style={{ padding: 10 }} xs={12} sm={6} md={3} lg={3}>\n                <Card>\n                  <CardHeader\n                    action={\n                      <IconButton\n                        aria-label=\"close\"\n                        onClick={event => {\n                          this.removeImage(\"AfterStuffingLastPallet\");\n                        }}\n                      >\n                        <CloseIcon />\n                      </IconButton>\n                    }\n                    title=\"After stuffing last pallet\"\n                  />\n                  <CardActionArea\n                    onClick={event => {\n                      this.openCamera(\"AfterStuffingLastPallet\");\n                    }}\n                  >\n                    <CardMedia\n                      style={{ height: 250, backgroundSize: \"cover\" }}\n                      image={\n                        this.state.data.AfterStuffingLastPallet === \"\" ||\n                        this.state.data.AfterStuffingLastPallet === undefined\n                          ? defaultImg\n                          : this.state.data.AfterStuffingLastPallet\n                      }\n                      title=\"After stuffing last pallet\"\n                    />\n                  </CardActionArea>\n                </Card>\n              </Grid>\n              {/**\tEND After stuffing last pallet */}\n              {/**\tAfter closed container door */}\n              <Grid item style={{ padding: 10 }} xs={12} sm={6} md={3} lg={3}>\n                <Card>\n                  <CardHeader\n                    action={\n                      <IconButton\n                        aria-label=\"close\"\n                        onClick={event => {\n                          this.removeImage(\"AfterClosedContainerDoor\");\n                        }}\n                      >\n                        <CloseIcon />\n                      </IconButton>\n                    }\n                    title=\"After closed container door\"\n                  />\n                  <CardActionArea\n                    onClick={event => {\n                      this.openCamera(\"AfterClosedContainerDoor\");\n                    }}\n                  >\n                    <CardMedia\n                      style={{ height: 250, backgroundSize: \"cover\" }}\n                      image={\n                        this.state.data.AfterClosedContainerDoor === \"\" ||\n                        this.state.data.AfterClosedContainerDoor === undefined\n                          ? defaultImg\n                          : this.state.data.AfterClosedContainerDoor\n                      }\n                      title=\"After closed container door\"\n                    />\n                  </CardActionArea>\n                </Card>\n              </Grid>\n              {/**\tEND After closed container door */}\n              {/**\tSealing container (Seal close up) */}\n              <Grid item style={{ padding: 10 }} xs={12} sm={6} md={3} lg={3}>\n                <Card>\n                  <CardHeader\n                    action={\n                      <IconButton\n                        aria-label=\"close\"\n                        onClick={event => {\n                          this.removeImage(\"SealingContainer\");\n                        }}\n                      >\n                        <CloseIcon />\n                      </IconButton>\n                    }\n                    title=\"Sealing container (Seal close up)\"\n                  />\n                  <CardActionArea\n                    onClick={event => {\n                      this.openCamera(\"SealingContainer\");\n                    }}\n                  >\n                    <CardMedia\n                      style={{ height: 250, backgroundSize: \"cover\" }}\n                      image={\n                        this.state.data.SealingContainer === \"\" ||\n                        this.state.data.SealingContainer === undefined\n                          ? defaultImg\n                          : this.state.data.SealingContainer\n                      }\n                      title=\"Sealing container (Seal close up)\"\n                    />\n                  </CardActionArea>\n                </Card>\n              </Grid>\n              {/**\tEND Sealing container (Seal close up) */}\n              {/** Diver and container */}\n              <Grid item style={{ padding: 10 }} xs={12} sm={6} md={3} lg={3}>\n                <Card>\n                  <CardHeader\n                    action={\n                      <IconButton\n                        aria-label=\"close\"\n                        onClick={event => {\n                          this.removeImage(\"InsideContainerLeftWall\");\n                        }}\n                      >\n                        <CloseIcon />\n                      </IconButton>\n                    }\n                    title=\"\tDiver and container\"\n                  />\n                  <CardActionArea\n                    onClick={event => {\n                      this.openCamera(\"InsideContainerLeftWall\");\n                    }}\n                  >\n                    <CardMedia\n                      style={{ height: 250, backgroundSize: \"cover\" }}\n                      image={\n                        this.state.data.DiverAndContainer === \"\" ||\n                        this.state.data.DiverAndContainer === undefined\n                          ? defaultImg\n                          : this.state.data.DiverAndContainer\n                      }\n                      title=\"Diver and container\"\n                    />\n                  </CardActionArea>\n                </Card>\n              </Grid>\n              {/**\tEND \tDiver and container */}\n            </Grid>\n          </LabelledOutline>\n        </Grid>\n\n        <div class=\"form-btn-container\">\n          <Grid item style={{ padding: 10 }} xs={3} sm={2} md={1}>\n            <Button variant=\"contained\" color=\"primary\" onClick={this.save}>\n              Save\n            </Button>\n          </Grid>\n          <Grid item style={{ padding: 10 }} xs={3} sm={2} md={1}>\n            <Button variant=\"contained\">Cancel</Button>\n          </Grid>\n        </div>\n\n        {/** Camera Dialog */}\n        <Dialog\n          fullScreen\n          open={this.state.openCamera}\n          onClose={this.closeCamera}\n          TransitionComponent={this.Transition}\n        >\n          {this.state.openCamera ? (\n            <ClientCamera\n              closeCamera={this.closeCamera}\n              handelChange={this.handelChange}\n              actionFor={this.state.currentActionName}\n            />\n          ) : (\n            \"\"\n          )}\n        </Dialog>\n        {/** End Camera Dialog */}\n\n        {/**Img Dialog */}\n        <LargePopOver\n          modalState={this.state.modalState}\n          contents={this.state.imageContent}\n          closeModal={this.closeModal}\n        />\n        {/**End Img Dialog */}\n      </Grid>\n    );\n  }\n}\n\nconst StuffingContainerPropTypes = {\n  // always use prop types!\n};\n\nStuffingContainer.propTypes = StuffingContainerPropTypes;\n\nexport default StuffingContainer;\n","import React, { Component, forwardRef, createRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./stuffingContainerDynamic.css\";\nimport {\n  Grid,\n  Button,\n  Dialog,\n  Typography,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  InputLabel,\n  AppBar,\n  TextField,\n  FormControl,\n  Snackbar,\n  Switch,\n  Slide,\n  Toolbar,\n  IconButton,\n  Paper,\n  List,\n  ListItem,\n  ListItemText,\n  Divider,\n  Card,\n  CardActionArea,\n  CardActions,\n  CardContent,\n  Fab,\n  CardMedia,\n  CardHeader\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport ClientCamera from \"../camera/camera\";\nimport LabelledOutline from \"../outLineDiv/outLineDiv\";\nimport defaultImg from \"../images/openCamera_3.png\";\nimport LargePopOver from \"../large-popover/largePopOver\";\n\nconst Transition = forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" />;\n});\n\n// todo: Unless you need to use lifecycle methods or local state,\n// write your component in functional form as above and delete\n// this section.\nconst defaultImage = \"/Images/openCamera.png\";\nconst formControls = {\n  ShippingType: {\n    valid: true,\n    message: \"\",\n    value: \"\"\n  },\n  Factory: {\n    valid: true,\n    message: \"\",\n    value: \"\"\n  },\n  StuffingDate: {\n    valid: true,\n    message: \"\",\n    value: \"\"\n  },\n  SI: {\n    valid: true,\n    message: \"\",\n    value: \"\"\n  },\n  Container: {\n    valid: true,\n    message: \"\",\n    value: \"\"\n  }\n};\n\nclass StuffingContainerDynamic extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      formControls: { ...formControls },\n      currentImgData: \"\",\n      openCamera: false,\n      openImageForm: false,\n      currentActionName: \"ImageData\",\n      imageContent: \"\",\n      modalState: false,\n      factorySelectedValue: \"\",\n      formState: {\n        valid: true,\n        errors: []\n      }\n    };\n    this.closeCamera = this.closeCamera.bind(this);\n    this.handelChange = this.handelChange.bind(this);\n    this.openCamera = this.openCamera.bind(this);\n    this.handelChange = this.handelChange.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.imgFormOnChange = this.imgFormOnChange.bind(this);\n    this.onImgSave = this.onImgSave.bind(this);\n    this.onImgCancel = this.onImgCancel.bind(this);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return true;\n  }\n\n  openImageForm = () => {\n    this.setState({ openImageForm: true });\n  };\n\n  closeImageForm = () => {\n    this.setState({ openImageForm: false });\n  };\n\n  openCamera(index) {\n    if(index === undefined || index === null)\n    {\n      this.setState({ openCamera: true });\n    } else {\n      let imgContents = {\n        img: this.state.data[index].ImageData,\n        propertyName: this.state.data[index].Description\n      };\n      this.setState({ modalState: true, imageContent: imgContents });\n    }\n    \n  }\n\n  closeCamera() {\n    this.setState({ openCamera: false });\n  }\n\n  closeModal() {\n    this.setState({ modalState: false });\n  }\n\n  onImgSave = () => {\n    let formData = [...this.state.data];\n    let currentData = { ...this.state.currentImgData };\n    formData.push(currentData);\n    this.setState({ data: formData, openImageForm: false, currentImgData: \"\" });\n  };\n\n  onImgCancel = () => {\n    let frmState = { ...this.state.formState };\n    frmState.valid = true;\n    frmState.errors = [];\n    this.setState({\n      currentImgData: \"\",\n      openImageForm: false,\n      formState: frmState\n    });\n  };\n\n  imgFormOnChange(value, propertyName) {\n    let currentData = { ...this.state.currentImgData };\n    let frmState = { ...this.state.formState };\n    if (value !== undefined && value !== null && value !== \"\") {\n      currentData[propertyName] = value;\n      frmState.valid = true;\n      this.setState({ currentImgData: currentData, formState: frmState });\n    } else {\n      frmState.valid = false;\n      this.setState({ formState: frmState });\n    }\n  }\n\n  renderImageData() {\n    return this.state.data.map((dt, i) => {\n      return (\n        <Grid key={i} item style={{ padding: 10 }} xs={12} sm={6} md={3} lg={3}>\n          <Card>\n            <CardHeader\n              action={\n                <IconButton\n                  aria-label=\"close\"\n                  onClick={event => {\n                    this.removeImage(dt);\n                  }}\n                >\n                  <CloseIcon />\n                </IconButton>\n              }\n              title={dt.Description}\n            />\n            <CardActionArea onClick={event => {this.openCamera(i);}}>\n              <CardMedia\n                style={{ height: 250, backgroundSize: \"cover\" }}\n                image={dt.ImageData}\n                title={dt.Description}\n              />\n            </CardActionArea>\n          </Card>\n        </Grid>\n      );\n    });\n  }\n\n  handelChange(value, propertyName) {\n    let formControlObject = { ...this.state.formControls };\n    let newData = { ...this.state.data };\n    if (\n      this.state.formControls.hasOwnProperty(propertyName) &&\n      (value === \"\" || value === undefined)\n    ) {\n      formControlObject[propertyName].valid = false;\n      formControlObject[\n        propertyName\n      ].message = `${propertyName} cannot be Empty`;\n    } else {\n      if (this.state.formControls.hasOwnProperty(propertyName)) {\n        formControlObject[propertyName].valid = true;\n        formControlObject[propertyName].message = \"\";\n      }\n      newData[propertyName] = value;\n    }\n    if (propertyName === \"Factory\") {\n      this.setState({ factorySelectedValue: value });\n    }\n    this.setState({ data: newData, formControls: formControlObject });\n  }\n\n  handleDateChange = (dateData, eventName) => {\n    if (dateData !== undefined && dateData !== null) {\n      let newDate = new Date(dateData);\n      this.handelChange(newDate, eventName);\n    }\n  };\n\n  removeImage(removeData) {\n    let newData = [...this.state.data];\n    var idx = newData.indexOf(removeData);\n    newData.splice(idx, 1);\n    this.setState({ data: newData });\n  }\n\n  save = () => {\n\n  };\n\n  render() {\n    return (\n      <Grid container>\n        <Typography variant=\"h4\">Stuffing Container</Typography>\n\n        {/** Form Controls Containers */}\n        <Grid item container xs={12}>\n          <Grid container direction=\"row\" justify=\"flex-start\" wrap=\"wrap\">\n            {/** Shipping_Type */}\n            <Grid item style={{ padding: 10 }} xs={12} sm={6} md={6} lg={6}>\n              <FormControl style={{ width: \"100%\", margin: 4 }}>\n                <TextField\n                  id=\"Shipping_Type\"\n                  label=\"Shipping Type\"\n                  error={!this.state.formControls.ShippingType.valid}\n                  helperText={this.state.formControls.ShippingType.message}\n                  defaultValue=\"\"\n                  className=\"\"\n                  onChange={event =>\n                    this.handelChange(event.target.value, \"ShippingType\")\n                  }\n                  margin=\"dense\"\n                />\n              </FormControl>\n            </Grid>\n            {/** End Shipping_Type */}\n          </Grid>\n        </Grid>\n        {/**END Form Controls Containers */}\n\n        {/** Imgs Containers */}\n        <Grid item container xs={12}>\n          <LabelledOutline\n            label=\"Group: 1. Before Stuffing\"\n            style={{ width: \"100%\", padding: \"10px\" }}\n          >\n            {/** Documentation  */}\n            <Grid\n              container\n              direction=\"row\"\n              justify=\"flex-start\"\n              alignItems=\"center\"\n              wrap=\"wrap\"\n            >\n              {/** Dynamic Container */}\n              {this.state.data.length === 0 ? <h5>No Data</h5> : \"\"}\n              {this.renderImageData()}\n              {/** End Dynamic Container */}\n            </Grid>\n          </LabelledOutline>\n        </Grid>\n        {/** End Imgs Containers */}\n\n        <div className=\"floating-btn-container\">\n          <Fab color=\"primary\" aria-label=\"add\" onClick={this.openImageForm}>\n            <AddIcon />\n          </Fab>\n        </div>\n\n        {/** Dynamic Image Add Container */}\n        <Dialog\n          open={this.state.openImageForm}\n          onClose={this.closeImageForm}\n          aria-labelledby=\"Add Image\"\n        >\n          <DialogTitle id=\"dialog-title\">{\"Add Image\"}</DialogTitle>\n          <DialogContent>\n            <Grid\n              container\n              direction=\"column\"\n              justify=\"flex-start\"\n              wrap=\"wrap\"\n              style={{ minWidth: 450 }}\n            >\n              {/** Description */}\n              <Grid item style={{ padding: 4 }}>\n                <FormControl style={{ width: \"100%\", margin: 4 }}>\n                  <TextField\n                    id=\"Description\"\n                    label=\"Description\"\n                    error={!this.state.formState}\n                    helperText={\"Image Description cannot be empty.\"}\n                    defaultValue=\"\"\n                    className=\"\"\n                    onChange={event =>\n                      this.imgFormOnChange(event.target.value, \"Description\")\n                    }\n                    margin=\"dense\"\n                  />\n                </FormControl>\n              </Grid>\n              {/** End Shipping_Type */}\n\n              {/** Add Image */}\n              <Grid item style={{ padding: 10 }}>\n                <Card>\n                  <CardActionArea\n                    onClick={event => {\n                      this.openCamera(null);\n                    }}\n                  >\n                    <CardMedia\n                      style={{ height: 250, backgroundSize: \"cover\" }}\n                      image={\n                        this.state.currentImgData.ImageData === undefined\n                          ? defaultImg\n                          : this.state.currentImgData.ImageData\n                      }\n                    />\n                  </CardActionArea>\n                </Card>\n              </Grid>\n              {/**End Add Image */}\n            </Grid>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.onImgCancel} color=\"primary\">\n              Cancel\n            </Button>\n            <Button onClick={this.onImgSave} color=\"primary\">\n              Save\n            </Button>\n          </DialogActions>\n        </Dialog>\n        {/** End Dynamic Image Add Container */}\n\n        {/** Camera Dialog */}\n        <Dialog\n          fullScreen\n          open={this.state.openCamera}\n          onClose={this.closeCamera}\n          TransitionComponent={this.Transition}\n        >\n          {this.state.openCamera ? (\n            <ClientCamera\n              closeCamera={this.closeCamera}\n              handelChange={this.imgFormOnChange}\n              actionFor={this.state.currentActionName}\n            />\n          ) : (\n            \"\"\n          )}\n        </Dialog>\n        {/** End Camera Dialog */}\n\n        {/**Img Dialog */}\n        <LargePopOver\n          modalState={this.state.modalState}\n          contents={this.state.imageContent}\n          closeModal={this.closeModal}\n        />\n        {/**End Img Dialog */}\n      </Grid>\n    );\n  }\n}\n\nconst StuffingContainerDynamicPropTypes = {\n  // always use prop types!\n};\n\nStuffingContainerDynamic.propTypes = StuffingContainerDynamicPropTypes;\n\nexport default StuffingContainerDynamic;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport StuffingContainer from './stuffingContainer/stuffingContainer'\nimport StuffingContainerDynamic from './stuffingContainerDynamic/stuffingContainerDynamic'\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{padding: 15}}>\n      <StuffingContainerDynamic />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/openCamera_3.4b1287b9.png\";"],"sourceRoot":""}